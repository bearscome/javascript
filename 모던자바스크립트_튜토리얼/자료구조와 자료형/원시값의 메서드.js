/*
    원시값의 메서드
        - 원시값을 객체처럼 다룰 수 있음 근데 원시 값은 객체가 아님
        - 원시 값
            1. 원시형 값
            1. 종류 : 문자('string'), 숫자(number), 큰 숫자(bigint), 불린(true, false), 심볼(symbol), null, undefined
        - 객체
            1. 프로퍼티에 다양한 종류의 값을 저장할 수 있다.
            2. {name:'john', age :30}와 같이 대괄호를 사용해 만들 수 있음, 여러가지 객체가 있는데 함수도 포함
*/

/*
    원시값을 객체처럼 사용하기
        - 문제
            1. 문자열이나 숫자와 같은 원시값을 다루어야 하는 작업이 많은데, 메서드를 사용하면 작업을 수월하게 할 수 있을 것 같다는 생각이 듭니다.
            2. 그런데 원시값은 가능한 한 빠르고 가벼워야 합니다
        - 해결 방안
            1. 원시값은 원시값 그대로 남겨둬 단일 값 형태를 유지합니다.
            2. 문자열, 숫자, 불린, 심볼의 메서드와 프로퍼티에 접근할 수 있도록 언어 차원에서 허용합니다.
            3. 이를 가능하게 하기 위해, 원시값이 메서드나 프로퍼티에 접근하려 하면 추가 기능을 제공해주는 특수한 객체, "원시 래퍼 객체(object wrapper)"를 만들어 줍니다. 이 객체는 곧 삭제됩니다.

            let str = 'hello';
            console.log(str.toUpperCase()) // 객체가 아닌 원시값인데 객체처럼 사용함
            toUpperCase()가 실행 된느 순서
            1. 문자열 str은 원시값이므로 원시값의 프로퍼티(toUpperCase)에 접근하는 순간 특별한 객체가 만들어집니다. 이 객체는 문자열의 값을 알고 있고, toUpperCase()와 같은 유용한 메서드를 가지고 있습니다.
            2. 메서드가 실행되고, 새로운 문자열이 반환됩니다(alert 창에 이 문자열이 출력됩니다).
            3. 특별한 객체는 파괴되고, 원시값 str만 남습니다.

            이런 내부 프로세스를 통해 원시값을 가볍게 유지하면서 메서드를 호출할 수 있는 것입니다.
            자바스크립트 엔진은 위 프로세스의 최적화에 많은 신경을 씁니다. 원시 래퍼 객체를 만들지 않고도 마치 원시 래퍼 객체를 생성(명세에 언급됨)한 것처럼 동작하게끔 해주죠.

        - null, undefined는 메서드가 없다
*/