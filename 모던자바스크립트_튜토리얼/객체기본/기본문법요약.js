/*
 기본문법 요약
    1. 코드구조
        a. 여러개의 구문은 세미콜론(;)을 기준으로 구분
        b. 자바스크릅티는 줄바꿈이 있으면 이를 '암시적' 세미콜론으로 해석. (대부분의 경우 세미콜론 의미, 하지만 항상을 의미하진 않음)
            ex1) alert(3 +
                        1
                        + 2); // 6
            ex2) alert("에러가 발생합니다.")

                [1, 2].forEach(alert) //에러 발생 (자바스크립트가 대괄호 앞에 세미콜론이 있다고 가정하지 않기 때문) [alert앞에 세미콜론 붙히면 에러 안뜸]

    2. 엄격모드
        모던 자바스크립트에서 지원하는 모든 기능을 활성화 하려면 맨 위에 'use strict'를 적어줘야 함
    
    3. 변수
        let
        const = 한 번 값을 할당하면 더는 값을 바꿀 수 없는 상수를 정의
        var = 과거에 쓰이던 키워드

        a. 변수 이름을 정할 때 규칙
            ㄱ. 숫자와 문자를 상용하되 첫 글자는 숫자가 될 수 없음.
            ㄴ. 특수기호는 $, _ 만 사용가능
            ㄷ. 비 라틴계 언어의 문자나 상형문자도 사용할 수 있즈민 잘 쓰진 않음 (한국어, 일본어 등등 가능)
        b. 자바스크립트는 동적 타이핑을 허용하기 때문에, 자료형을 바꿔가며 값을 할당할 수 있음
            ex1). let x = 5
                  x = "John"
            ㄱ. 숫자형 : 정수와 부동 소수점을 저장
            ㄴ. BigInt : 아주 큰 숫자를 저장
            ㄷ. 문자형 : 문자열 저장
            ㄹ. 블린형 : true, false
            ㅁ. null : '비어있음', '존재하지 않음'을 나타내는 독립 자료형
            ㅂ. undefined : 값이 할당되지 않은 상태, 정의되지 않은 상태을 나타내는 독립 자료형
            ㅅ. 심볼형 : 복잡한 자료구조를 저장하는데 쓰이는 객체형과 고유한 식별자를 만들 때 사용
        c. typeof 연산자는 값의 자료형을 반환. 하지만 두가지 예외 상황이 있다.
            typeof null == "object" // 언어 자체의 오류
                typeof null의 결과는 "object"입니다. null은 별도의 고유한 자료형을 가지는 특수 값으로 객체가 아니지만, 
                하위 호환성을 유지하기 위해 이런 오류를 수정하지 않고 남겨둔 상황입니다. 언어 자체의 오류이므로 null이 객체가 아님에 유의하시기 바랍니다.
            typeof fuction() {} == "function" //함수는 특별하게 취급 
                그런데 '함수’형은 따로 없습니다. 함수는 객체형에 속합니다. 
                이런 동작 방식이 형식적으론 잘못되긴 했지만, 
                아주 오래전에 만들어진 규칙이었기 때문에 하위 호완성 유지를 위해 남겨진 상태입니다. 
                한편, 실무에선 이런 특징이 매우 유용하게 사용되기도 합니다.

    4. 상호작용
        호스트 환경이 브라우저인 경우, 당므과 같은 UI함수를 이용하여 사용자와 상호작용 가능
        a. prompt(question, [default])
            매개변수로 받은 question을 넣어 사용자에게 보여줌, '확인'버튼을 누르면 입력한 값을 반환, '취소'버튼을 누르면 null 반환
        b. confirm(question)
            컨펌 대화상자에 매개변수로 받은 question을 넣어 사용자에게 보여줌, 확인을 누르면 true, 그 이외의 경우는 false
        c. alert(message)
            message가 담긴 얼럿 창 보여줌
        세 함수는 모두 모달창을 띄어주는데, 모달창이 닫히기 전까지는 코드를 중단

    5. 연산자
        a. 산술 연산자 : * / + -, %, **(거듭제곱 연산자) 피연산자 중 하나가 문자열 일 때 하나를 문자형으로 바꾸고 두 문자열 연결(+)
        b. 할당 연산자 : a = b 형태의 할당 연산자와 a *=2 형태의 복합 연산자가 있음
        c. 조건부 연산자 : 조건 ? true(값1) : false(값2)
        d. 논리 연산자 : AND연산자 &&, OR연산자 ||(꼭 true, false일 필요는 없음), NOT 연산자 ! 피연산자의 자료형을 블린형으로 바꾼 후 그 역을 반환
        e. null 병합 연산자 : ??는 피연산자 중 실제 값이 정의된 피연산자를 찾음 a가 null이거나 undefined가 아니라면 a ?? b의 평가결과는 a이고, a가 null이거나 undefined라면 평가결과는 b
            x = (a !== null && a !== undefined) ? a : b;
        f. 비교 연산자 : 동등 연산자 ==는 형이 다른 값끼리 비교할 때 자료형을 숫자형으로 바꾼 후 진행 null과 undefined는 자기끼리 비교할 땐 참으로 반환, 다른 자료형은 거짓 반환
        g. 비트 연산자 : 인수를 32비트 정수로 변환하여 이진 연산을 수행
        h. 기타 연산자 
            ㄱ. < > <= >= : 피연산자의 자료형을 숫자형으로 바꾼 후 비교
            ㄴ. === : 일치 연산자는 형을 변환하지 않고, 형이 다르면 무조건 거짓 
            ㄷ.null과 undefined는 특별한 값 두 값을 ==연산자로 비교하면 true지만 다른 값과 비교하면 무조건 false
    
    6. 반복문 
        for, while, while-do
        1.for(let i = 0; i < 10; i++) {
            ...
        } //let i = 0은 for문에서만 사용 (만약 글로벌 변수라면 세미콜론으로 단축해도 됌)
        2.while(조건) {
            ...
            break, contine
        }
        do {
            ...
        }while(조건)
    
    7. swich문
        if문을 사용해 재작성 가능, 조건을 확인할 때 내부적으로 일치연산자===를 사용하여 진행
        let age = prompt("나이",age)
        switch(age) {
            case 18 :
                .... //함수는 무조건 문자열로 반환하여 이 구문은 실행불가
                break
            case "18" :
                alert("젊어서 좋겠다")
                break
            default :
                다른 값이 반환되면 이 구문 실행
        }
    
    8. 함수
        a. 함수 선언문
            function sum(a, b) {
                let result : a + b
                return result 
            }
        b. 함수 표현식
            let sum = funtion(a, b) {
                let result = a + b;
                return result;
            }
        c. 화살표 함수
            ㄱ. 화살표 (=>) 우측엔 표현식이 있음
                let sum = (a, b) => a + b;
            ㄴ. 대괄호 {...}를 사용하면 본문에 여러 줄의 코드를 작성할 수 있음 return문이 꼭 있어야함
                let sum = (a, b) => {
                    ...
                    return a + b;
                }
            ㄷ. 인수가 없는 경우
                let sayHi = () => alert("안녕")
            ㄹ. 인수가 하나인 경우
                let sayHi = n => n * 2
        e. 매개변수을 기본값으로 설정 가능 funtion (a=1, a=2) {...}
           함수는 항상 무언가를 반환합니다. return문이 없으면 undefined를 반환합니다.
*/