/*
    심볼형
        - 자바스크립트는 객체 프로퍼티 키로 오직 문자형과 심볼형만 허용
        - 숫자형, 블린형 모두 불가능하고 문자형, 심볼형만 가능
*/

/*
    심볼 : 유일한 식별자를 만들고 싶을 때 사용
    symbol()을 사용하면 심볼 값 생성 가능
    let id1 = Symbol() // 새로운 심볼 생성
    let id2 = Symbol('id') //console.log() : Symbol(id)로 뜸 id는 심볼을 설명하는 것
    console.log(id2)
    console.log(id1 == id2) //false
*/

/*
    심볼은 문자형으로 자동 형 반환되지 않는다.
    문자열과 심볼은 근본이 다르기 때문에 우연히라도 서로의 타입으로 변환되선 안 됩니다. 
    자바스크립트에선 '언어 차원의 보호장치(language guard)'를 마련해 심볼형이 다른 형으로 변환되지 않게 막아줍니다.
    심볼을 반드시 출력해줘야 하는 상황이라면 아래와 같이 .toString() 메서드를 명시적으로 호출해주면 됩니다.
*/

/*
    숨김 프로퍼티
    심볼을 이용하면 숨김 프로퍼티 생성 가능.
    숨긴 프로퍼티는 외부 코드에서 접근이 불가하고 덮어쓸 수 없는 프로퍼티이다.
    만약 아이디 같은 경우 하나의 값만 필요하므로 symbol()을 쓰면 유일성이 보장된다.
    다른 스크립트에서 객체를 식별해야하는 상황에서 유용하다.
    심볼은 for..in에서 배제된다
     Object.assign을 사용하면 모든 프로퍼티가 복사되므로 심볼도 같이 복사 된다.
     let id = Symbol("id");
        let user = {
        [id]: 123
        };

        let clone = Object.assign({}, user);

        alert( clone[id] ); // 123
*/

/*
    전역 심볼
    심볼은 이름이 같더라도 모두 별개로 취급된다.
    하지만 이름이 같은 심볼이 같은 개체를 가리키길 원하는 경우가 있다.

    // 전역 레지스트리에서 심볼을 읽습니다.
    let id = Symbol.for("id"); // 심볼이 존재하지 않으면 새로운 심볼을 만듭니다.

    // 동일한 이름을 이용해 심볼을 다시 읽습니다(좀 더 멀리 떨어진 코드에서도 가능합니다).
    let idAgain = Symbol.for("id");

    // 두 심볼은 같습니다.
    alert( id === idAgain ); // true

    전역 심볼 레지스트리 안에 있는 심볼은 전역 심볼이라고 불립니다. 
    애플리케이션에서 광범위하게 사용해야 하는 심볼이라면 전역 심볼을 사용하세요.
*/

/*
    Symbol.keyFor
    전역 심볼을 찾을 때 사용되는 Symbol.for(key)에 반대되는 메서드도 있습니다. 
    Symbol.keyFor(sym)를 사용하면 이름을 얻을 수 있습니다.

    // 이름을 이용해 심볼을 찾음
    let sym = Symbol.for("name");
    let sym2 = Symbol.for("id");

    // 심볼을 이용해 이름을 얻음
    alert( Symbol.keyFor(sym) ); // name
    alert( Symbol.keyFor(sym2) ); // id
    Symbol.keyFor는 전역 심볼 레지스트리를 뒤져서 해당 심볼의 이름을 얻어냅니다. 
    검색 범위가 전역 심볼 레지스트리이기 때문에 전역 심볼이 아닌 심볼에는 사용할 수 없습니다. 
    전역 심볼이 아닌 인자가 넘어오면 Symbol.keyFor는 undefined를 반환합니다.

    전역 심볼이 아닌 모든 심볼은 description 프로퍼티가 있습니다.
    일반 심볼에서 이름을 얻고 싶으면 description 프로퍼티를 사용하면 됩니다.
    let globalSymbol = Symbol.for("name");
    let localSymbol = Symbol("name");

    alert( Symbol.keyFor(globalSymbol) ); // name, 전역 심볼
    alert( Symbol.keyFor(localSymbol) ); // undefined, 전역 심볼이 아님

    alert( localSymbol.description ); // name
*/

/*
    시스템 심볼 : 자바스크립트 내부에서 사용되는 심볼입니다. 시스템 심볼을 활용하면 객체를 미세 조정할 수 있습니다.
    '시스템 심볼(system symbol)'은 자바스크립트 내부에서 사용되는 심볼입니다. 시스템 심볼을 활용하면 객체를 미세 조정할 수 있습니다.

    명세서 내의 표, 잘 알려진 심볼(well-known symbols)에서 어떤 시스템 심볼이 있는지 살펴보세요.

    Symbol.hasInstance
    Symbol.isConcatSpreadable
    Symbol.iterator
    Symbol.toPrimitive
    기타 등등
    객체가 어떻게 원시형으로 변환되는지 알기 위해선 Symbol.toPrimitive에 대해 알아야 하는데, 자세한 내용은 곧 다루도록 하겠습니다.

    시스템 심볼 각각에 대한 내용은 연관되는 자바스크립트 기능을 학습하면서 알아보겠습니다.
*/

/*
    요약
    Symbol은 원시형 데이터로, 유일무이한 식별자를 만드는 데 사용됩니다.

    Symbol()을 호출하면 심볼을 만들 수 있습니다.
    설명(이름)은 선택적으로 추가할 수 있습니다.

    심볼은 이름이 같더라도 값이 항상 다릅니다. 
    이름이 같을 때 값도 같길 원한다면 전역 레지스트리를 사용해야 합니다. 
    Symbol.for(key)는 key라는 이름을 가진 전역 심볼을 반환합니다. key라는 이름을 가진 전역 심볼이 없으면 새로운 전역 심볼을 만들어줍니다.
    key가 같다면 Symbol.for는 어디서 호출하든 상관없이 항상 같은 심볼을 반환해 줍니다.

    심볼의 주요 유스 케이스는 다음과 같습니다.

    객체의 ‘숨김’ 프로퍼티 – 외부 스크립트나 라이브러리에 ‘속한’ 객체에 새로운 프로퍼티를 추가해 주고 싶다면 심볼을 만들고, 
    이를 프로퍼티 키로 사용하면 됩니다. 키가 심볼인 경우엔 for..in의 대상이 되지 않아서 의도치 않게 프로퍼티가 수정되는 것을 예방할 수 있습니다. 
    외부 스크립트나 라이브러리는 심볼 정보를 갖고 있지 않아서 프로퍼티에 직접 접근하는 것도 불가능합니다.
    심볼형 키를 사용하면 프로퍼티가 우연히라도 사용되거나 덮어씌워 지는 걸 예방할 수 있습니다.

    이런 특징을 이용하면 원하는 것을 객체 안에 ‘은밀하게’ 숨길 수 있습니다. 
    외부 스크립트에선 우리가 숨긴 것을 절대 볼 수 없습니다.

    자바스크립트 내부에서 사용되는 시스템 심볼은 Symbol.*로 접근할 수 있습니다. 
    시스템 심볼을 이용하면 내장 메서드 등의 기본 동작을 입맛대로 변경할 수 있습니다. 
    iterable 객체에선 Symbol.iterator를, 객체를 원시형으로 변환하기에선 Symbol.toPrimitive이 어떻게 사용되는지 알아보겠습니다.

    사실 심볼을 완전히 숨길 방법은 없습니다. 내장 메서드 Object.getOwnPropertySymbols(obj)를 사용하면 모든 심볼을 볼 수 있고,
    메서드 Reflect.ownKeys(obj)는 심볼형 키를 포함한 객체의 모든 키를 반환해줍니다. 
    그런데 대부분의 라이브러리, 내장 함수 등은 이런 메서드를 사용하지 않습니다.
*/
